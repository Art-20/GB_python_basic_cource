# Задание 5
#
# Создать вручную список, содержащий цены на товары (10–20 товаров), например:
#
# [57.8, 46.51, 97, ...]
#
# a) Привести каждый элемент списка к виду <r> руб <kk> коп и собрать их в одну строку через запятую. Пример:
#
# 57 руб 80 коп, 46 руб 51 коп ...
#
# Подумать, как из цены получить рубли и копейки, как добавить нули,
# если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).
#
# b) Вывести цены, отсортированные по возрастанию,
# новый список не создавать (доказать, что объект списка после сортировки остался тот же).
#
# c) Создать новый список, содержащий те же цены, но отсортированные по убыванию.
#
# d) Вернуть цены пяти самых дорогих товаров.
# Сможете ли вывести цены этих товаров по возрастанию, написав минимум кода?

from random import uniform

print('************************ Task_2_5_a *****************************')
def transfer_list_in_str(list_in: list) -> str:
    """Преобразует каждый элемент списка (вещественное число) в строку вида '<r> руб <kk> коп' и
        формирует из них единую строковую переменную разделяя значения запятой."""
    new_list = []
    for i in list_in:
        m = str(i).split('.')
        new_list.append(f'<{m[0]}> руб <{m[1].ljust(2,"0")}> коп')
    str_out = ', '.join(new_list)
    return str_out


my_list = [round(uniform(10, 100), 2) for _ in range(1, 16)]  # автоматическая генерация случайных 15 чисел
print(f'Исходный список: {my_list}')
result_1 = transfer_list_in_str(my_list)
print(result_1)

print('************************ Task_2_5_b *****************************')


def sort_prices(list_in: list) -> list:
    """Сортирует вещественные числа по возрастанию, не создавая нового списка"""
    list_in.sort()
    return ["отсортированный результирующий список", list_in]

# зафиксируйте здесь информацию по исходному списку my_list
print('исходный список: ', my_list, id(my_list))
result_2 = sort_prices(my_list)
# зафиксируйте здесь доказательство, что результат result_2 остался тем же объектом
print(result_2, id(result_2))
print(my_list, id(my_list)) # my_list отсортирован, id не изменился, т. е.
                            # сортировка выполнена прямо в исходном списке
                            # y result_2 id отличается - он ссылается на функцию



print('************************ Task_2_5_c *****************************')

def sort_price_adv(list_in: list) -> list:
    """Создаёт новый список и возвращает список с элементами по убыванию"""

    list_in = sorted(list_in, reverse = True)  # создает новый список с новым id
    list_out = ["список элементов в списке по убыванию", list_in]
    return list_out

print('исходный список: ', my_list, id(my_list))
result_3 = sort_price_adv(my_list)
print(result_3, id(result_3))

print('************************ Task_2_5_d *****************************')

def check_five_max_elements(list_in: list) -> list:
    """Проверяет элементы входного списка вещественных чисел и возвращает
        список из ПЯТИ максимальных значений"""
    list_in = sorted(list_in, reverse = True)
    list_out = ["список из пяти самых больших элементов", list_in[0:5]]
    return list_out


result_4 = check_five_max_elements(my_list)
print(result_4)


